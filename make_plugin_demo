#!/bin/bash
# This builds the Juce PluginDemo. If you use the -d flag, it will copy the created file into
# your machine's plugin folders. If you want to see how that happens, look in
# PluginTools/makescript.

# This is expected to be run from the root (WORKSPACE directory). You could easily configure it
# to run from elsewhere.
print_usage () {
  echo "Usage: make_plugin_demo [-d]"
}

EXTRA_FLAGS=""
# https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash
while getopts 'd' flag; do
  case "${flag}" in
    d) EXTRA_FLAGS="-d" ;;
    *) print_usage
       exit 1 ;;
  esac
done

set -e
# Delete previous built binary so that we know we aren't working with stale information.
BINARY=$WORKSPACE_ROOT/bazel-bin/ThirdParty/Juce/PluginDemo/JuceDemoPlugin.so
rm -f "$BINARY"
# The linker visibility flag is important. It hides symbols so there aren't clashes when multiple
# plugins are in use. I believe it's also what lets the VST/AU entry points be visible (i.e. not
# stripped).
#
# The bazel flag noincompatible_remove_legacy_whole_archive prevents symbols from being stripped
# off as well.
# References:
# https://github.com/bazelbuild/bazel/issues/11577#issuecomment-643088611
# https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/bazel-discuss/7TMbBIMkptk/YJtY4m7EAgAJ
bazel build -c opt --copt=-fvisibility-inlines-hidden \
  ThirdParty/Juce/PluginDemo:JuceDemoPlugin.so \
  --define="mode=plugin" \
  --define="project=juce_plugin_demo" \
  --noincompatible_remove_legacy_whole_archive

$WORKSPACE_ROOT/PluginTools/makescript \
  -n JuceDemoPlugin \
  -b "$BINARY" \
  -r "$WORKSPACE_ROOT/bazel-genfiles/ThirdParty/Juce/PluginDemo" \
  "$EXTRA_FLAGS"